"""
Copyright (c) 2015 Red Hat, Inc
All rights reserved.

This software may be modified and distributed under the terms
of the BSD license. See the LICENSE file for details.
"""

import logging
import docker
from flexmock import flexmock
import pytest
import tarfile
from functools import partial
import subprocess

from atomic_reactor.inner import DockerBuildWorkflow
from atomic_reactor.plugin import PostBuildPluginsRunner, PluginFailedException
from atomic_reactor.plugins.post_rpmqa import (PostBuildRPMqaPlugin, RPMDB_PACKAGES_NAME,
                                               RPMDB_DIR_NAME)
from atomic_reactor.utils.rpm import parse_rpm_output
from atomic_reactor.util import DockerfileImages
from tests.constants import DOCKERFILE_GIT
from tests.docker_mock import mock_docker
from tests.stubs import StubInsideBuilder, StubSource
from docker.errors import APIError

TEST_IMAGE = "fedora:latest"
SOURCE = {"provider": "git", "uri": DOCKERFILE_GIT}


PACKAGE_LIST = ['python-docker-py;1.3.1;1.fc24;noarch;(none);'
                '191456;7c1f60d8cde73e97a45e0c489f4a3b26;1438058212;(none);(none)',
                'fedora-repos-rawhide;24;0.1;noarch;(none);'
                '2149;d41df1e059544d906363605d47477e60;1436940126;(none);(none)',
                'gpg-pubkey-doc;1.0;1;noarch;(none);'
                '1000;00000000000000000000000000000000;1436940126;(none);(none)']
PACKAGE_LIST_WITH_AUTOGENERATED = PACKAGE_LIST + ['gpg-pubkey;qwe123;zxcasd123;(none);(none);0;'
                                                  '(none);1370645731;(none);(none)']
PACKAGE_LIST_WITH_AUTOGENERATED_B = [x.encode("utf-8") for x in PACKAGE_LIST_WITH_AUTOGENERATED]


pytestmark = pytest.mark.usefixtures('user_params')


def generate_archive(tmpdir, empty=False):
    """Generate a fake tar archive
    :param bool empty: whether the archive is empty.
    :rtype: generator
    """
    rpm_dir = tmpdir.join('rpm').mkdir()
    if not empty:
        rpm_dir.join('Basenames').write('')
        rpm_dir.join('Dirnames').write('')
        rpm_dir.join('Packages').write('')

    archive_path = tmpdir.join('temp.tar')
    with tarfile.open(str(archive_path), 'w') as archive_tar:
        archive_tar.add(rpm_dir, arcname=RPMDB_DIR_NAME)

    with open(str(archive_path), 'rb') as f:
        for block in iter(partial(f.read, 8), b''):
            yield block
    archive_path.remove()


def mock_reactor_config(workflow, list_rpms_from_scratch=False):
    config = {'version': 1,
              'koji': {'hub_url': '/', 'root_url': '', 'auth': {}},
              'list_rpms_from_scratch': list_rpms_from_scratch}
    workflow.conf.conf = config


def mock_logs(cid, **kwargs):
    return b"\n".join(PACKAGE_LIST_WITH_AUTOGENERATED_B)


def mock_logs_raise(cid, **kwargs):
    raise RuntimeError


def mock_logs_empty(cid, **kwargs):
    return ''


def setup_mock_logs_retry(cache=None):
    cache = cache or {}
    cache.setdefault('attempt', 0)

    def mock_logs_retry(cid, **kwargs):
        if cache['attempt'] < 4:
            logs = mock_logs_empty(cid, **kwargs)
        else:
            logs = mock_logs(cid, **kwargs)

        cache['attempt'] += 1
        return logs

    return mock_logs_retry


@pytest.mark.parametrize(('base_from_scratch', 'list_rpms_from_scratch'), [
    (False, False),
    (False, True),
    (True, False),
    # (True, True) covered in test_rpmqa_plugin_base_from_scratch
])
@pytest.mark.parametrize('remove_container_error', [True, False])
@pytest.mark.parametrize("ignore_autogenerated", [
    {"ignore": True, "package_list": PACKAGE_LIST},
    {"ignore": False, "package_list": PACKAGE_LIST_WITH_AUTOGENERATED},
])
def test_rpmqa_plugin(caplog, docker_tasker, base_from_scratch, list_rpms_from_scratch,
                      remove_container_error, ignore_autogenerated):
    should_raise_error = {}
    if remove_container_error:
        should_raise_error['remove_container'] = None
    mock_docker(should_raise_error=should_raise_error)

    workflow = DockerBuildWorkflow(source=None)
    workflow.source = StubSource()
    workflow.builder = StubInsideBuilder().for_workflow(workflow)
    if base_from_scratch:
        workflow.dockerfile_images = DockerfileImages(['scratch'])
    else:
        workflow.dockerfile_images = DockerfileImages([])
    mock_reactor_config(workflow, list_rpms_from_scratch=list_rpms_from_scratch)

    flexmock(docker.APIClient, logs=mock_logs)
    runner = PostBuildPluginsRunner(
        docker_tasker,
        workflow,
        [{"name": PostBuildRPMqaPlugin.key,
          "args": {
              'image_id': TEST_IMAGE,
              "ignore_autogenerated_gpg_keys": ignore_autogenerated["ignore"]}}
         ])
    results = runner.run()
    if base_from_scratch:
        log_msg = "from scratch, but list_rpms_from_scratch is False, won't run rpmqa"
        assert results[PostBuildRPMqaPlugin.key] is None
        assert workflow.image_components is None
        assert log_msg in caplog.text

    else:
        assert results[PostBuildRPMqaPlugin.key] == ignore_autogenerated["package_list"]
        assert workflow.image_components == parse_rpm_output(ignore_autogenerated["package_list"])


@pytest.mark.parametrize('packages_exists', [True, False])
@pytest.mark.parametrize('rpm_failed', [True, False])
@pytest.mark.parametrize('get_archive_raises', [None, APIError, Exception])
def test_rpmqa_plugin_base_from_scratch(caplog, tmpdir, docker_tasker, packages_exists, rpm_failed,
                                        get_archive_raises):
    mock_docker()
    workflow = DockerBuildWorkflow(source=None)
    workflow.source = StubSource()
    workflow.builder = StubInsideBuilder().for_workflow(workflow)
    workflow.dockerfile_images = DockerfileImages(['scratch'])
    mock_reactor_config(workflow, list_rpms_from_scratch=True)

    if get_archive_raises is None:
        mock_stream = generate_archive(tmpdir, empty=not packages_exists)

        (flexmock(docker_tasker.tasker.d.wrapped)
         .should_receive('get_archive')
         .and_return(mock_stream, {}))
    else:
        response = flexmock(content="abc", status_code=123)
        (flexmock(docker_tasker.tasker.d.wrapped)
         .should_receive('get_archive')
         .and_raise(get_archive_raises, 'get archive failed', response))

    runner = PostBuildPluginsRunner(
        docker_tasker,
        workflow,
        [{"name": PostBuildRPMqaPlugin.key,
          "args": {
              'image_id': TEST_IMAGE,
              "ignore_autogenerated_gpg_keys": True}}
         ])

    if get_archive_raises is None and packages_exists and rpm_failed:
        (flexmock(subprocess)
         .should_receive("check_output")
         .once()
         .and_raise(Exception, 'rpm query failed'))
    elif get_archive_raises is None and packages_exists and not rpm_failed:
        (flexmock(subprocess)
         .should_receive("check_output")
         .once()
         .and_return("\n".join(PACKAGE_LIST_WITH_AUTOGENERATED)))

    if get_archive_raises == APIError:
        results = runner.run()
        log_msg = 'Could not extract rpmdb in'
        assert log_msg in caplog.text
        assert results[PostBuildRPMqaPlugin.key] is None
        assert workflow.image_components is None

    elif get_archive_raises == Exception:
        with pytest.raises(Exception, match='get archive failed'):
            runner.run()
        log_msg = 'Get archive failed while extracting rpmdb in'
        assert log_msg in caplog.text
        assert workflow.image_components is None

    else:
        if not packages_exists:
            results = runner.run()
            log_msg = '{} does not exist in rpmdb'.format(RPMDB_PACKAGES_NAME)
            assert log_msg in caplog.text
            assert results[PostBuildRPMqaPlugin.key] is None
            assert workflow.image_components is None

        else:
            log_msg_getting = 'getting rpms from rpmdb:'
            if rpm_failed:
                with pytest.raises(Exception, match='rpm query failed'):
                    runner.run()
                assert log_msg_getting in caplog.text
                assert workflow.image_components is None
                log_msg = 'Failed to get rpms from rpmdb:'
                assert log_msg in caplog.text

            else:
                results = runner.run()
                assert log_msg_getting in caplog.text
                assert results[PostBuildRPMqaPlugin.key] == PACKAGE_LIST
                assert workflow.image_components == parse_rpm_output(PACKAGE_LIST)

    log_msg = "from scratch, list_rpms_from_scratch is True, trying get rpmdb"
    assert log_msg in caplog.text


def test_rpmqa_plugin_skip(docker_tasker):  # noqa
    """
    Test skipping the plugin if workflow.image_components is already set
    """
    mock_docker()
    workflow = DockerBuildWorkflow(source=None)
    workflow.source = StubSource()
    workflow.builder = StubInsideBuilder().for_workflow(workflow)

    image_components = {
        'type': 'rpm',
        'name': 'something'
    }
    setattr(workflow, 'image_components', image_components)

    flexmock(docker.APIClient, logs=mock_logs_raise)
    runner = PostBuildPluginsRunner(docker_tasker, workflow,
                                    [{"name": PostBuildRPMqaPlugin.key,
                                      "args": {'image_id': TEST_IMAGE}}])
    results = runner.run()
    assert results[PostBuildRPMqaPlugin.key] is None
    assert workflow.image_components == image_components


def test_rpmqa_plugin_exception(docker_tasker):  # noqa
    mock_docker()
    workflow = DockerBuildWorkflow(source=None)
    workflow.source = StubSource()
    workflow.builder = StubInsideBuilder().for_workflow(workflow)
    workflow.dockerfile_images = DockerfileImages([])

    flexmock(docker.APIClient, logs=mock_logs_raise)
    runner = PostBuildPluginsRunner(docker_tasker, workflow,
                                    [{"name": PostBuildRPMqaPlugin.key,
                                      "args": {'image_id': TEST_IMAGE}}])
    with pytest.raises(PluginFailedException):
        runner.run()


def test_dangling_volumes_removed(docker_tasker, caplog):

    mock_docker()
    workflow = DockerBuildWorkflow(source=None)
    workflow.source = StubSource()
    workflow.builder = StubInsideBuilder().for_workflow(workflow)
    workflow.dockerfile_images = DockerfileImages([])

    runner = PostBuildPluginsRunner(docker_tasker, workflow,
                                    [{"name": PostBuildRPMqaPlugin.key,
                                      "args": {'image_id': TEST_IMAGE}}])

    runner.run()

    logs = {}
    for record in caplog.records:
        logs.setdefault(record.levelno, []).append(record.message)

    assert "container_id = 'f8ee920b2db5e802da2583a13a4edbf0523ca5fff6b6d6454c1fd6db5f38014d'" \
        in logs[logging.DEBUG]

    expected_volumes = [u'test', u'conflict_exception', u'real_exception']
    assert "volumes = {}".format(expected_volumes) in logs[logging.DEBUG]
    for volume in expected_volumes:
        assert "removing volume '{}'".format(volume) in logs[logging.INFO]
    assert 'ignoring a conflict when removing volume conflict_exception' in logs[logging.DEBUG]


def test_empty_logs_retry(docker_tasker):  # noqa
    mock_docker()
    workflow = DockerBuildWorkflow(source=None)
    workflow.source = StubSource()
    workflow.builder = StubInsideBuilder().for_workflow(workflow)
    workflow.dockerfile_images = DockerfileImages([])

    mock_logs_retry = setup_mock_logs_retry()
    flexmock(docker.APIClient, logs=mock_logs_retry)
    runner = PostBuildPluginsRunner(docker_tasker, workflow,
                                    [{"name": PostBuildRPMqaPlugin.key,
                                      "args": {'image_id': TEST_IMAGE}}])
    results = runner.run()
    assert results[PostBuildRPMqaPlugin.key] == PACKAGE_LIST
    assert workflow.image_components == parse_rpm_output(PACKAGE_LIST)


def test_empty_logs_failure(docker_tasker):  # noqa
    mock_docker()
    workflow = DockerBuildWorkflow(source=None)
    workflow.source = StubSource()
    workflow.builder = StubInsideBuilder().for_workflow(workflow)
    workflow.dockerfile_images = DockerfileImages([])

    flexmock(docker.APIClient, logs=mock_logs_empty)
    runner = PostBuildPluginsRunner(docker_tasker, workflow,
                                    [{"name": PostBuildRPMqaPlugin.key,
                                      "args": {'image_id': TEST_IMAGE}}])
    with pytest.raises(PluginFailedException) as exc_info:
        runner.run()
    assert 'Unable to gather list of installed packages in container' in str(exc_info.value)
